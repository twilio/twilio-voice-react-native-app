version: 2.1

###
# Orbs
###
orbs:
  android: circleci/android@2.3.0

###
# Parameters
###
parameters:
  pr_workflow:
    type: boolean
    default: true # by default pr workflow will get executed.

###
# Anchors & Aliases
###
aliases:
  - &rc-filter-ios
    tags:
      only:
        - /^\d+\.\d+\.\d+-rc\d+-ios$/
        - /^\d+\.\d+\.\d+-preview\.\d+-rc\d+-ios$/
        - /^\d+\.\d+\.\d+-beta\.\d+-rc\d+-ios$/
    branches:
      ignore: /.*/

  - &rc-filter-android
    tags:
      only:
        - /^\d+\.\d+\.\d+-rc\d+-android$/
        - /^\d+\.\d+\.\d+-preview\.\d+-rc\d+-android$/
        - /^\d+\.\d+\.\d+-beta\.\d+-rc\d+-android$/
    branches:
      ignore: /.*/

  - &release-filter-ios
    tags:
      only:
        - /^\d+\.\d+\.\d+-ios$/
        - /^\d+\.\d+\.\d+-preview\.\d+-ios$/
        - /^\d+\.\d+\.\d+-beta\.\d+-ios$/
    branches:
      ignore: /.*/

  - &release-filter-android
    tags:
      only:
        - /^\d+\.\d+\.\d+-android$/
        - /^\d+\.\d+\.\d+-preview\.\d+-android$/
        - /^\d+\.\d+\.\d+-beta\.\d+-android$/
    branches:
      ignore: /.*/

  - &android-executor
    name: android/android-machine
    resource-class: large
    tag: 2023.07.1

  - &app-package-json-key
    app-dependencies-{{ arch }}-{{ checksum "app/package.json" }}

  - &server-package-json-key
    server-dependencies-{{ arch }}-{{ checksum "server/package.json" }}

  - &save-app-package-json
    name: Save App Javascript Dependencies
    key: *app-package-json-key
    paths: app/node_modules

  - &save-server-package-json
    name: Save Server Javascript Dependencies
    key: *server-package-json-key
    paths: server/node_modules

  - &restore-app-package-json
    name: Restore App javascript Dependencies
    key: *app-package-json-key

  - &restore-server-package-json
    name: Restore Server javascript Dependencies
    key: *server-package-json-key

###
# Executors
###
executors:
  default:
    docker:
      - image: cimg/node:16.19
    working_directory: ~/project
  ios-executor:
    macos:
      xcode: "14.3.1"
      resource_class: macos.m1.medium.gen1

###
# Commands
###
commands:
  attach_project:
    steps:
      - attach_workspace:
          at: ~/project

  ###
  # App commands
  ###
  app-save-env-file:
    steps:
      - run:
          name: "App: save env file"
          command: |
            cd app
            echo "DOMAIN_NAME=$DOMAIN_NAME" >> .env
            echo "CLIENT_ID=$CLIENT_ID" >> .env
            echo "AUTH0_SCOPE=$AUTH0_SCOPE" >> .env
            echo "AUTH0_AUDIENCE=$AUTH0_AUDIENCE" >> .env
            echo "DEFAULT_URL=$DEFAULT_URL" >> .env
            echo "AUTH0_URL=$AUTH0_URL" >> .env
            echo "AUTH0_USERNAME=$AUTH0_USERNAME" >> .env
            echo "AUTH0_PASSWORD=$AUTH0_PASSWORD" >> .env
            echo "AUTH0_CLIENT_ID=$AUTH0_CLIENT_ID" >> .env
            echo "AUTH0_CLIENT_SECRET=$AUTH0_CLIENT_SECRET" >> .env
            echo "ENABLE_ABOUT_PAGE=$ENABLE_ABOUT_PAGE" >> .env
            echo "SLACK_URL=$SLACK_URL" >> .env
            echo "SLACK_CHANNEL_NAME=$SLACK_CHANNEL_NAME" >> .env

  app-install-dependencies:
    steps:
      - run:
          name: "App: install Yarn dependencies"
          command: |
            cd app
            yarn cache clean
            yarn install --immutable

  app-save-google-services-json:
    steps:
      - run:
          name: "App: save Google Services JSON"
          command: |
            cd app
            echo $GOOGLE_SERVICES_JSON | base64 -d > android/app/google-services.json

  app-setup-cocoapods:
    steps:
      - run:
          name: "App: setup Cocoapods"
          command: |
            sudo gem install cocoapods -v 1.11.3

  app-install-pods:
    steps:
      - run:
          name: "App: install Pods"
          command: |
            cd app/ios
            pod install

  app-install-applesimutils:
    steps:
      - run:
          name: "App: install applesimutils"
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew tap wix/brew
            HOMEBREW_NO_AUTO_UPDATE=1 brew install applesimutils

  app-detox-build:
    parameters:
      configuration:
        description: The Detox config to build as defined in .detoxrc.js
        type: string
    steps:
      - run:
          name: "App: Detox build"
          command: |
            cd app
            yarn detox:build --configuration << parameters.configuration >>

  app-android-build:
    steps:
      - run:
          name: "App: Detox build"
          command: |
            export MY_APP_MODE=""
            cd app/android
            ./gradlew assembleRelease assembleAndroidTest -DtestBuildType=release
      - persist_to_workspace:
          root: .
          paths:
            - app/android/app/build/outputs/apk/release/app-release.apk

  app-detox-test:
    parameters:
      configuration:
        description: The Detox config to test as defined in .detoxrc.js
        type: string
    steps:
      - run:
          name: "App: Detox test"
          command: |
            cd app
            yarn detox:test --configuration << parameters.configuration >> --artifacts-location "./detox_artifacts" --headless --take-screenshots all

  app-expose-port:
    steps:
      - run:
          name: "App: expose port"
          command: adb reverse tcp:${PORT} tcp:${PORT}

  generate-client-identity:
    steps:
      - run:
          name: "Generate a client identity"
          command: echo "export CLIENT_IDENTITY=$(uuidgen)" >> "$BASH_ENV"

  display-client-identity:
    steps:
      - run:
          name: "Read client identity"
          command: echo ${CLIENT_IDENTITY}

  ###
  # Server commands
  ###
  server-install-dependencies:
    steps:
      - run:
          name: "Server: install dependencies"
          command: |
            cd server
            yarn cache clean
            yarn install --immutable

  server-build:
    steps:
      - run:
          name: "Server: build"
          command: |
            cd server
            yarn build

  server-start:
    steps:
      - run:
          name: "Server: start"
          background: true
          command: |
            cd server
            yarn start

  server-delete-twiml-app:
    steps:
      - run:
          name: "Server: delete twiml app"
          when: always
          command: |
            cd server/scripts
            node deleteTwimlApp.js

  ##
  # Ngrok Commands
  ###
  ngrok-install:
    steps:
      - run:
          name: "ngrok: install"
          command: |
            wget https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
            sudo tar xvzf ngrok-v3-stable-linux-amd64.tgz
            sudo chmod +x ngrok
            ./ngrok authtoken ${NGROK_AUTH_TOKEN}
      - run:
          name: "ngrok: run"
          background: true
          command: ./ngrok http ${PORT}
      - run:
          name: "ngrok: check"
          command: |
            sleep 30
            curl http://127.0.0.1:4040/api/tunnels
      - run:
          name: "ngrok: create twiML app with ngrok public_url"
          command: |
            cd server/scripts
            node createTwimlApp.js

  ngrok-install-mac:
    steps:
      - run:
          name: "ngrok: install mac"
          command: |
            brew install ngrok/ngrok/ngrok
            ngrok config add-authtoken ${NGROK_AUTH_TOKEN}
      - run:
          name: "ngrok: start tunnel"
          background: true
          command: ngrok http ${PORT}
      - run:
          name: "ngrok: check"
          command: |
            sleep 30
            curl http://127.0.0.1:4040/api/tunnels
      - run:
          name: "ngrok: create twiML app with ngrok public_url"
          command: |
            cd server/scripts
            node createTwimlApp.js

  configure-git-user:
    description: "Configures the git user for committing"
    steps:
      - run:
          name: Git User Config
          command: |
            git config --global user.email "${GITHUB_EMAIL_SDK_BUILD}"
            git config --global user.name "${GITHUB_USERNAME_SDK_BUILD}"

jobs:
  ###
  # App jobs
  ###
  app-cache-install-yarn-dependencies:
    executor: default
    steps:
      - checkout
      - attach_project
      - restore_cache: *restore-app-package-json
      - app-install-dependencies
      - save_cache: *save-app-package-json
      - persist_to_workspace:
          root: .
          paths: .

  app-test:
    executor: default
    steps:
      - attach_project
      - run:
          name: "App: unit tests"
          command: |
            cd app
            yarn test --coverage
      - store_artifacts:
          path: app/coverage

  app-lint:
    executor: default
    steps:
      - attach_project
      - run:
          name: "App: lint"
          command: |
            cd app
            yarn lint

  app-typecheck:
    executor: default
    steps:
      - attach_project
      - run:
          name: "App: typecheck"
          command: |
            cd app
            yarn typecheck

  build-archive-android-app:
    executor:
      <<: *android-executor
    steps:
      - checkout
      - app-save-env-file
      - restore_cache: *restore-app-package-json
      - app-install-dependencies
      - app-save-google-services-json
      - android/install-ndk:
          version: "21.4.7075529"
      # for aarch64
      - android/install-ndk:
          version: "24.0.8215888"
      - app-android-build

  app-detox-android:
    executor:
      <<: *android-executor
    steps:
      - checkout
      - app-save-env-file
      - restore_cache: *restore-app-package-json
      - app-install-dependencies
      - save_cache: *save-app-package-json
      - app-save-google-services-json
      - restore_cache: *restore-server-package-json
      - server-install-dependencies
      - save_cache: *save-server-package-json
      - ngrok-install
      - generate-client-identity
      - display-client-identity
      - server-build
      - server-start
      - android/create-avd:
          avd-name: TwilioVoiceReactNativeReferenceApp_AVD
          install: true
          system-image: system-images;android-29;google_apis;x86_64
          additional-args: --device pixel_4
      - android/start-emulator:
          avd-name: TwilioVoiceReactNativeReferenceApp_AVD
          memory: 8192
          post-emulator-launch-assemble-command: ""
          restore-gradle-cache-post-emulator-launch: false
          wait-for-emulator: true
      - app-detox-build:
          configuration: android.emu.release
      - app-expose-port
      - app-detox-test:
          configuration: android.emu.release
      - server-delete-twiml-app
      - run:
          name: "Save Android logs"
          when: always
          command: |
            cd app
            adb logcat -d > ./detox_artifacts/logcat.txt
      - store_artifacts:
          when: always
          path: app/detox_artifacts

  app-detox-ios:
    macos:
      xcode: 14.0.0
    steps:
      - checkout
      - app-save-env-file
      # NOTE(mhuynh): JIRA-2072 this causes Detox issues only on iOS
      # - restore_cache:
      #     keys:
      #       - app-dependencies-{{ arch }}-{{ checksum "app/package.json" }}
      - app-install-dependencies
      # - save_cache:
      #     key: app-dependencies-{{ arch }}-{{ checksum "app/package.json" }}
      #     paths: app/node_modules
      - app-install-applesimutils
      - app-install-pods
      - restore_cache: *restore-server-package-json
      - server-install-dependencies
      - save_cache: *save-server-package-json
      - ngrok-install-mac
      - generate-client-identity
      - display-client-identity
      - server-build
      - server-start
      - app-detox-build:
          configuration: ios.sim.release
      - app-detox-test:
          configuration: ios.sim.release
      - server-delete-twiml-app
      - store_artifacts:
          when: always
          path: app/detox_artifacts

  ###
  # Server jobs
  ###
  server-cache-install-yarn-dependencies:
    executor: default
    steps:
      - checkout
      - attach_project
      - restore_cache: *restore-server-package-json
      - server-install-dependencies
      - save_cache: *save-server-package-json
      - persist_to_workspace:
          root: .
          paths: .

  server-lint:
    executor: default
    steps:
      - attach_project
      - run:
          name: "Server: lint"
          command: |
            cd server
            yarn lint

  server-build:
    executor: default
    steps:
      - attach_project
      - server-build

  server-test:
    executor: default
    steps:
      - attach_project
      - run:
          name: "Server: unit tests"
          command: |
            cd server
            yarn test --coverage
      - store_artifacts:
          path: server/coverage

  # Publish the android app
  publish-android-app-appcenter:
    executor:
      <<: *android-executor
    parameters:
      distribution-audience:
        # Use this flag to control the app distrubution audience
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: "Publishing Android app to AppCenter"
          command: |
            echo no | npm install -g appcenter-cli
            appcenter login --token ${APP_CENTER_API_TOKEN}
            appcenter distribute release \
              -f app/android/app/build/outputs/apk/release/app-release.apk \
              -g << parameters.distribution-audience >> \
              --app ${APP_CENTER_ORG_NAME}/${APP_CENTER_APP_NAME_ANDROID} \
              -b ${CIRCLE_TAG} \
              --disable-telemetry

  build-archive-ios-app:
    executor: ios-executor
    description: "Build and archive iOS app"
    steps:
      - checkout
      - app-save-env-file
      - app-install-dependencies
      - app-install-pods
      - configure-git-user
      - run:
          name: "Set up Xcode signing"
          command: |
            mkdir -p app/ios/fastlane
            echo $FASTLANE_FILE_APPFILE_BASE64 | base64 -D -o app/ios/fastlane/Appfile
            echo $FASTLANE_FILE_MATCHFILE_BASE64 | base64 -D -o app/ios/fastlane/Matchfile
            echo $FASTLANE_FILE_FASTFILE_BASE64 | base64 -D -o app/ios/fastlane/Fastfile
            cd app/ios
            fastlane ci_match_install
      - attach_workspace:
          at: app/ios/temp
      - run:
          name: "App: build iOS dogfood app"
          command: |
            export MY_APP_MODE=""
            export APP_NAME=TwilioVoiceReactNativeReferenceApp
            export ARCHIVE_PATH=temp/Archives/${APP_NAME}.xcarchive
            export CI_BUILD_NUMBER=${CIRCLE_BUILD_NUM}
            export CI_BUILD_VERSION=${CIRCLE_TAG}
            cd app/ios
            xcodebuild -workspace ${APP_NAME}.xcworkspace -scheme ${APP_NAME} -configuration Release -sdk iphoneos -archivePath ${ARCHIVE_PATH} ONLY_ACTIVE_ARCH=NO DEVELOPMENT_TEAM=${XCODE_DEVELOPMENT_TEAM} PRODUCT_BUNDLE_IDENTIFIER=${XCODE_DEVELOPMENT_BUNDLE_ID} PROVISIONING_PROFILE_SPECIFIER="${XCODE_PROVISIONING_PROFILE}" CODE_SIGN_IDENTITY="${XCODE_CODE_SIGN_IDENTITY}" CI_BUILD_NUMBER=${CI_BUILD_NUMBER} CI_BUILD_VERSION=${CI_BUILD_VERSION} CODE_SIGN_STYLE="Manual" archive
      - run:
          name: "App: archive iOS dogfood app"
          command: |
            export APP_NAME=TwilioVoiceReactNativeReferenceApp
            export ARCHIVE_PATH=temp/Archives/${APP_NAME}.xcarchive
            export IPA_DIR=temp/IPAs
            export EXPORT_OPTIONS_PLIST=TwilioVoiceReactNativeReferenceApp/ExportOptions/enterprise.plist
            cd app/ios
            xcodebuild -exportArchive -archivePath ${ARCHIVE_PATH} -exportPath ${IPA_DIR} -exportOptionsPlist ${EXPORT_OPTIONS_PLIST}
      - run:
          name: "App: gather iOS app artifacts"
          command: |
            export APP_NAME=TwilioVoiceReactNativeReferenceApp
            export ARCHIVE_PATH=temp/Archives/${APP_NAME}.xcarchive
            export IPA_DIR=temp/IPAs
            export ARTIFACTS_DIR=temp/Artifacts
            cd app/ios
            zip --quiet -r ${ARCHIVE_PATH}/dSYMs/TwilioVoiceReactNativeReferenceApp-dSYMs.zip ${ARCHIVE_PATH}/dSYMs/*.dSYM
            mkdir -p ${ARTIFACTS_DIR}/Release/TwilioVoiceReactNativeReferenceApp
            cp -R ${IPA_DIR}/Apps/TwilioVoiceReactNativeReferenceApp.ipa ${ARTIFACTS_DIR}/Release/TwilioVoiceReactNativeReferenceApp
            cp -R ${ARCHIVE_PATH} ${ARTIFACTS_DIR}/Release/TwilioVoiceReactNativeReferenceApp
            cp -R ${ARCHIVE_PATH}/dSYMs/*.zip ${ARTIFACTS_DIR}/Release/TwilioVoiceReactNativeReferenceApp
      - persist_to_workspace:
          root: app/ios/temp
          paths:
            - Artifacts/Release/TwilioVoiceReactNativeReferenceApp/*
      - store_artifacts:
          path: app/ios/temp/Artifacts/Release/TwilioVoiceReactNativeReferenceApp/TwilioVoiceReactNativeReferenceApp.ipa
      - store_artifacts:
          path: app/ios/temp/Artifacts/Release/TwilioVoiceReactNativeReferenceApp/TwilioVoiceReactNativeReferenceApp-dSYMs.zip

  # Publish the iOS app
  publish-ios-app-appcenter:
    executor: ios-executor
    parameters:
      distribution-audience:
        # Use this flag to control the app distrubution audience
        type: string
    steps:
      - run: sudo npm install -g appcenter-cli
      - checkout
      - attach_workspace:
          at: app/ios/temp
      - run:
          name: "Publishing iOS app to AppCenter"
          command: |
            export APP_NAME=TwilioVoiceReactNativeReferenceApp
            export ARTIFACTS_DIR=app/ios/temp/Artifacts/Release/TwilioVoiceReactNativeReferenceApp
            appcenter login --token ${APP_CENTER_API_TOKEN}
            appcenter distribute release -f ${ARTIFACTS_DIR}/${APP_NAME}.ipa -g << parameters.distribution-audience >> --app ${APP_CENTER_ORG_NAME}/${APP_CENTER_APP_NAME_IOS} -b ${CIRCLE_TAG}
            appcenter crashes upload-symbols -s ${ARTIFACTS_DIR}/${APP_NAME}-dSYMs.zip --app ${APP_CENTER_ORG_NAME}/${APP_CENTER_APP_NAME_IOS}

###
# Workflows
###
workflows:
  ###
  # Pull request workflow
  ###
  build-test:
    when: << pipeline.parameters.pr_workflow >>
    jobs:
      # app jobs
      - app-cache-install-yarn-dependencies
      - app-test:
          requires:
            - app-cache-install-yarn-dependencies
      - app-lint:
          requires:
            - app-cache-install-yarn-dependencies
      - app-typecheck:
          requires:
            - app-cache-install-yarn-dependencies
      # server jobs
      - server-cache-install-yarn-dependencies
      - server-test:
          requires:
            - server-cache-install-yarn-dependencies
      - server-lint:
          requires:
            - server-cache-install-yarn-dependencies
      - server-build:
          requires:
            - server-cache-install-yarn-dependencies
      # e2e jobs
      - app-detox-android:
          context:
            - vblocks-js
      - app-detox-ios:
          context:
            - vblocks-js

  ###
  # RC workflow
  ###
  release-candidate:
    jobs:
      - build-archive-ios-app:
          filters: *rc-filter-ios
          context:
            - vblocks-dogfood-reference-app
      - publish-ios-app-appcenter:
          distribution-audience: ${APP_CENTER_RC_AUDIENCE}
          filters: *rc-filter-ios
          context:
            - vblocks-dogfood-reference-app
          requires:
            - build-archive-ios-app
      - build-archive-android-app:
          filters: *rc-filter-android
          context:
            - vblocks-dogfood-reference-app
      - publish-android-app-appcenter:
          distribution-audience: ${APP_CENTER_RC_AUDIENCE}
          filters: *rc-filter-android
          context:
            - vblocks-dogfood-reference-app
          requires:
            - build-archive-android-app

  ###
  # Release workflow
  ###
  release:
    jobs:
      - build-archive-ios-app:
          filters: *release-filter-ios
          context:
            - vblocks-dogfood-reference-app
      - publish-ios-app-appcenter:
          distribution-audience: ${APP_CENTER_RELEASE_AUDIENCE}
          filters: *release-filter-ios
          context:
            - vblocks-dogfood-reference-app
          requires:
            - build-archive-ios-app
      - build-archive-android-app:
          filters: *release-filter-android
          context:
            - vblocks-dogfood-reference-app
      - publish-android-app-appcenter:
          distribution-audience: ${APP_CENTER_RELEASE_AUDIENCE}
          filters: *release-filter-android
          requires:
            - build-archive-android-app
          context:
            - vblocks-dogfood-reference-app
